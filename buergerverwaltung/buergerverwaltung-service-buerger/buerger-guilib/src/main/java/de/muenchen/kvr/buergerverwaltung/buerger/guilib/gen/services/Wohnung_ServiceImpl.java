package de.muenchen.kvr.buergerverwaltung.buerger.guilib.gen.services;

import com.vaadin.server.Page;
import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.spring.annotation.UIScope;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Wohnung_;
import de.muenchen.kvr.buergerverwaltung.buerger.client.rest.Wohnung_RestClient;
import de.muenchen.kvr.buergerverwaltung.buerger.client.rest.Wohnung_RestClientImpl;
import de.muenchen.kvr.buergerverwaltung.buerger.guilib.services.Wohnung_FallbackDataGenerator;

import de.muenchen.vaadin.guilib.services.SecurityService;
import de.muenchen.vaadin.demo.i18nservice.I18nPaths;
import de.muenchen.vaadin.demo.i18nservice.buttons.SimpleAction;
import de.muenchen.vaadin.guilib.BaseUI;
import de.muenchen.vaadin.guilib.components.GenericErrorNotification;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.hateoas.Link;
import org.springframework.http.HttpStatus;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.io.Serializable;
import java.net.URI;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import static de.muenchen.vaadin.demo.i18nservice.I18nPaths.getNotificationPath;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
@SpringComponent @UIScope
public class Wohnung_ServiceImpl implements Wohnung_Service, Serializable {

    private static final Logger LOG = LoggerFactory.getLogger(Wohnung_ServiceImpl.class);
    public static final String TIMEOUT_I18N = "timeout";
	public static final int TIMEOUT_VAL = 5;
    
    private Wohnung_RestClient client;
    private RestTemplate template;
    private SecurityService securityService;
    private final ExecutorService executor;

    @Autowired
    public Wohnung_ServiceImpl(SecurityService securityService, @Value("${BUERGER.microservice.basePath}") String basePath) {
        this.securityService=securityService;
        
        final URI baseUri = URI.create(basePath);
		this.client = new Wohnung_RestClientImpl(getTemplate(),baseUri);
		
        executor = Executors.newCachedThreadPool();
    }

	/**
	 * creates one Wohnung_
	 * @param wohnung the one who shall be created
	 * @return wohnung
	 */
    @Override
    public Wohnung_ create(Wohnung_ wohnung) {
    	Wohnung_ returnWohnung;
        Future<Wohnung_> result = executor.submit(() -> client.create(wohnung));
        try {
            returnWohnung = result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
        } catch (HttpClientErrorException e) {
            returnWohnung = Wohnung_FallbackDataGenerator.createWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.create);
        } catch (TimeoutException e) {
            returnWohnung = Wohnung_FallbackDataGenerator.createWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.create, TIMEOUT_I18N);
        } catch (Exception e) {
            returnWohnung = Wohnung_FallbackDataGenerator.createWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.create);
        } finally {
            result.cancel(true);
        }
        return returnWohnung;
    }

	/**
	 * updates one Wohnung_
	 * @param wohnung the one who shall be updated
	 * @return wohnung
	 */
    @Override
    public Wohnung_ update(Wohnung_ wohnung) {
    	Wohnung_ returnWohnung;
        Future<Wohnung_> result = executor.submit(() -> client.update(wohnung));
        try {
            returnWohnung = result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
        } catch (HttpClientErrorException e) {
            returnWohnung = Wohnung_FallbackDataGenerator.createWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.update);
        } catch (TimeoutException e) {
            returnWohnung = Wohnung_FallbackDataGenerator.createWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.update, TIMEOUT_I18N);
        } catch (Exception e) {
            returnWohnung = Wohnung_FallbackDataGenerator.createWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.update);
        } finally {
            result.cancel(true);
        }
        return returnWohnung;
    }

	/**
	 * Method to delete a certain link
	 * @param link the link
	 * @return successful
	 */
    @Override
    public boolean delete(Link link) {
    	Future<?> result = executor.submit(() -> client.delete(link));
        try {
            result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
            return true;
        } catch (HttpClientErrorException e) {
            LOG.error(e.getMessage());
            HttpStatus statusCode = e.getStatusCode();
            if (statusCode.equals(HttpStatus.CONFLICT) || statusCode.equals(HttpStatus.NOT_FOUND))
                showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.delete, statusCode.toString());
            else
                showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.delete);
            return false;
        } catch (TimeoutException e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.delete, TIMEOUT_I18N);
            return false;
        } catch (Exception e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.delete);
            return false;
        } finally {
            result.cancel(true);
        }
    }

	/**
	 * Returns all Wohnung_
	 * @return wohnungs the results
	 */
    @Override
    public List<Wohnung_> findAll() {
        List<Wohnung_> wohnungs;
        Future<List<Wohnung_>> result = Executors.newCachedThreadPool().submit((Callable<List<Wohnung_>>) client::findAll);
        try {
            wohnungs = result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
            return wohnungs;
        } catch (HttpClientErrorException e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
        } catch (TimeoutException e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read, TIMEOUT_I18N);
        } catch (Exception e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
        } finally {
            result.cancel(true);
        }
        return wohnungs;
    }

	/**
	 * Returns all Wohnung_ of a specified relation
	 * @param relation the relation
	 * @return wohnungs the results
	 */
    @Override
    public List<Wohnung_> findAll(Link relation) {
        List<Wohnung_> wohnungs;
        Future<List<Wohnung_>> result = executor.submit(() -> client.findAll(relation));
        try {
            wohnungs = result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
        } catch (HttpClientErrorException e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
        } catch (TimeoutException e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read, TIMEOUT_I18N);
        } catch (Exception e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
        } finally {
            result.cancel(true);
        }
        return wohnungs;
    }

	/**
	 * Returns an Optional of Wohnung_ to one Link
	 * @param link the link
	 * @return the found Wohnung_ 
	 */
    @Override
    public Optional<Wohnung_> findOne(Link link) {
        Optional<Wohnung_> wohnung;
        Future<Optional<Wohnung_>> result = executor.submit(() -> client.findOne(link));
        try {
            wohnung = result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
        } catch (HttpClientErrorException e) {
            wohnung = Wohnung_FallbackDataGenerator.createOptionalWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
        } catch (TimeoutException e) {
            wohnung = Wohnung_FallbackDataGenerator.createOptionalWohnungFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read, TIMEOUT_I18N);
        } catch (Exception e) {
            wohnung = Wohnung_FallbackDataGenerator.createOptionalWohnungFallback();
			if(link.getRel()==null){
            	LOG.error(e.getMessage());
            	showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
            }
        } finally {
            result.cancel(true);
        }
        return wohnung;
    }

	/**
	 * Query to given string
	 * @param query
	 * @return wohnungs the results
	 */
    @Override
    public List<Wohnung_> queryWohnung(String query) {
        List<Wohnung_> wohnungs;
        Future<List<Wohnung_>> result = executor.submit(() -> client.findFullTextFuzzy(query));
        try {
            wohnungs = result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
        } catch (HttpClientErrorException e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
        } catch (TimeoutException e){
	          wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
	          LOG.error(e.getMessage());
	        showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read, TIMEOUT_I18N);
        } catch (Exception e) {
            wohnungs = Wohnung_FallbackDataGenerator.createWohnungsFallback();
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.read);
		} finally {
			result.cancel(true);
		}
        return wohnungs;
    }

	/**
     * Sets relations to entities
     * @param link the endpoint of the relation
     * @param links collection of links that are set to be related
     * @return successful
     */
    @Override
    public boolean setRelations(Link link, List<Link> links) {
        Future<?> result = executor.submit(() -> client.setRelations(link, links));
        try {
            result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
            return true;
        } catch (HttpClientErrorException e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.association);
            return false;
        } catch (TimeoutException e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.association, TIMEOUT_I18N);
            return false;
        } catch (Exception e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.association);
            return false;
        } finally {
            result.cancel(true);
        }
    }

	/**
     * Sets a relation to an entity
     * @param link the endpoint of the relation
     * @param relation the link that is set to be related
     * @return successful
     */
    @Override
    public boolean setRelation(Link link, Link relation) {
        Future<?> result = executor.submit(() -> client.setRelation(link, relation));
        try {
            result.get(TIMEOUT_VAL, TimeUnit.SECONDS);
            return true;
        } catch (HttpClientErrorException e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.association);
            return false;
        } catch (TimeoutException e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.association, TIMEOUT_I18N);
            return false;
        } catch (Exception e) {
            LOG.error(e.getMessage());
            showErrorNotification(I18nPaths.NotificationType.error, SimpleAction.association);
            return false;
        } finally {
            result.cancel(true);
        }
    }

    /**
     * Gets the resttemplate from the security if not present
     * @return resttemplate of this session
     */
    public RestTemplate getTemplate() {
        if (template != null) {
            return template;
        }
        return securityService.getRestTemplate().orElse(null);
    }

	/**
     * Shows an error notification
     * @param type the type of the notification
     * @param action the type of action performed
     */
    private void showErrorNotification(I18nPaths.NotificationType type, SimpleAction action) {
        GenericErrorNotification succes = new GenericErrorNotification(
                BaseUI.getCurrentI18nResolver().resolveRelative(Wohnung_.class, getNotificationPath(type, action, I18nPaths.Type.label)),
                BaseUI.getCurrentI18nResolver().resolveRelative(Wohnung_.class, getNotificationPath(type, action, I18nPaths.Type.text)));
        succes.show(Page.getCurrent());
    }

	/**
     * Shows an error notification specified by a status code
     * @param type the type of the notification
     * @param action the type of action performed
     * @param statusCode the status code
     */
    private void showErrorNotification(I18nPaths.NotificationType type, SimpleAction action, String statusCode) {
        GenericErrorNotification succes = new GenericErrorNotification(
                BaseUI.getCurrentI18nResolver().resolveRelative(Wohnung_.class, getNotificationPath(type, action, I18nPaths.Type.label, statusCode)),
                BaseUI.getCurrentI18nResolver().resolveRelative(Wohnung_.class, getNotificationPath(type, action, I18nPaths.Type.text, statusCode)));
        succes.show(Page.getCurrent());
    }
}
