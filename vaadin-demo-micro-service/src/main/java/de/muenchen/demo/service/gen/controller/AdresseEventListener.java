package de.muenchen.demo.service.gen.controller;

import de.muenchen.demo.service.gen.domain.Adresse;
import de.muenchen.demo.service.gen.services.AdresseEventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.core.event.AbstractRepositoryEventListener;
import org.springframework.stereotype.Component;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */

/**
 * This event-listener allows a AdresseEventService to implement logic before and after Events.
 */
@Component
public class AdresseEventListener extends AbstractRepositoryEventListener<Adresse> {
    @Autowired
    AdresseEventService service;

    @Override
    protected void onAfterCreate(Adresse entity) {
        service.onAfterCreate(entity);
    }

    @Override
    protected void onBeforeCreate(Adresse entity) {
        service.onBeforeCreate(entity);
    }

    @Override
    protected void onBeforeSave(Adresse entity) {
        service.onBeforeSave(entity);
    }

    @Override
    protected void onAfterSave(Adresse entity) {
        service.onAfterSave(entity);
    }

    @Override
    protected void onBeforeLinkSave(Adresse parent, Object linked) {
        service.onBeforeLinkSave(parent, linked);
    }

    @Override
    protected void onAfterLinkSave(Adresse parent, Object linked) {
        service.onAfterLinkSave(parent, linked);
    }

    @Override
    protected void onBeforeLinkDelete(Adresse parent, Object linked) {
        service.onBeforeLinkDelete(parent, linked);
    }

    @Override
    protected void onBeforeDelete(Adresse entity) {
        service.onBeforeDelete(entity);
    }

    @Override
    protected void onAfterDelete(Adresse entity) {
        service.onAfterDelete(entity);
    }

    @Override
    protected void onAfterLinkDelete(Adresse parent, Object linked) {
        service.onAfterLinkDelete(parent, linked);
    }
}
