package de.muenchen.demo.service.gen.controller;

import de.muenchen.demo.service.gen.domain.Buerger;
import de.muenchen.demo.service.gen.domain.Wohnung;
import de.muenchen.demo.service.gen.rest.BuergerRepository;
import de.muenchen.demo.service.gen.services.BusinessActionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler;
import org.springframework.data.rest.webmvc.RepositoryLinksResource;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.ResourceProcessor;
import org.springframework.hateoas.ResourceSupport;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.List;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */

/**
 * This controller is responsible for mapping businessActions to REST-endpoints.
 */
@BasePathAwareController
@RequestMapping(value = "/businessActions")
public class BusinessActionController implements ResourceProcessor<RepositoryLinksResource> {

    @Autowired
    BusinessActionService actionService;

    @Autowired
    BuergerRepository buergerRepo;

    /**
     * This method returns a list of links of all mapped businessActions.
     */
    public List<Link> getMethodActions() {
        List<Link> methodLinks = new ArrayList<>();
        methodLinks.add(linkTo(methodOn(BusinessActionController.class).testdatenerzeugen(null)).withRel("testdatenerzeugen"));
        methodLinks.add(linkTo(methodOn(BusinessActionController.class).buergeralsmailverschicken(null, null, null)).withRel("buergeralsmailverschicken"));
        methodLinks.add(linkTo(methodOn(BusinessActionController.class).buergerkombinieren(null, null, null)).withRel("buergerkombinieren"));
        methodLinks.add(linkTo(methodOn(BusinessActionController.class).listewohnungauswaehlen(null, null)).withRel("listewohnungauswaehlen"));

        return methodLinks;
    }

    /**
     * Return available businessActions on the /businessActions endpoint.
     */
    @RequestMapping(method = RequestMethod.GET)
    public
    @ResponseBody
    ResponseEntity<BusinessLinksResource> getActions() {
        BusinessLinksResource links = new BusinessLinksResource();
        links.add(linkTo(BusinessActionController.class).withSelfRel());

        links.add(getMethodActions());

        return new ResponseEntity<>(links, HttpStatus.OK);
    }

    /**
     * This method adds the link to /businessActions to the REST-startpoint.
     */
    @Override
    public RepositoryLinksResource process(RepositoryLinksResource repositoryLinksResource) {
        repositoryLinksResource.add(linkTo(methodOn(BusinessActionController.class).getActions()).withRel("businessActions"));
        return repositoryLinksResource;
    }

    /**
     * This BusinessAction's purpose is to insert test data.
     */
    @RequestMapping(value = "/testdatenerzeugen", method = RequestMethod.GET)
    public ResponseEntity<?> testdatenerzeugen(PersistentEntityResourceAssembler assembler) {
        actionService.testdatenerzeugen();

        return new ResponseEntity<>(HttpStatus.OK);

    }

    /**
     * This BusinessAction's purpose is: sendet buerger als mail an adresse
     */
    @RequestMapping(value = "/buergeralsmailverschicken", method = RequestMethod.GET)
    public ResponseEntity<?> buergeralsmailverschicken(PersistentEntityResourceAssembler assembler, @Param(value = "abc") String abc, @Param(value = "bcd") String bcd) {
        if (abc == null || bcd == null)
            throw new IllegalArgumentException("Expected parameters: String abc, String bcd");

        // Tries to load all entity-params from their Repositories.
        // Parts of the String representation of the entities id.
        String[] parts;
        String entity;
        String oid;

        // Tries to find the Buerger for the given id.
        // Form for id: http://'server_address'/'entity_name's/'oid'
        parts = bcd.split("/");
        if (parts.length <= 2)
            throw new IllegalArgumentException("bcd can only accept Buerger ids.");
        entity = parts[parts.length - 2];
        oid = parts[parts.length - 1];
        if (!"buerger".equals(entity))
            throw new IllegalArgumentException("Can only accept Buerger ids.");
        Buerger bcdEntity = buergerRepo.findOne(Long.parseLong(oid));
        if (bcdEntity == null)
            throw new IllegalArgumentException("Found no Buerger for oid: " + oid);

        actionService.buergeralsmailverschicken(abc, bcdEntity);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * This BusinessAction's purpose is: addiert 2 Buerger
     * It returns one Buerger.
     */
    @RequestMapping(value = "/buergerkombinieren", method = RequestMethod.GET)
    public ResponseEntity<?> buergerkombinieren(PersistentEntityResourceAssembler assembler, @Param(value = "ersterBuerger") String ersterBuerger, @Param(value = "abc") String abc) {
        if (ersterBuerger == null || abc == null)
            throw new IllegalArgumentException("Expected parameters: String ersterBuerger, String abc");

        // Tries to load all entity-params from their Repositories.
        // Parts of the String representation of the entities id.
        String[] parts;
        String entity;
        String oid;

        // Tries to find the Buerger for the given id.
        // Form for id: http://'server_address'/'entity_name's/'oid'
        parts = ersterBuerger.split("/");
        if (parts.length <= 2)
            throw new IllegalArgumentException("ersterBuerger can only accept Buerger ids.");
        entity = parts[parts.length - 2];
        oid = parts[parts.length - 1];
        if (!"buerger".equals(entity))
            throw new IllegalArgumentException("Can only accept Buerger ids.");
        Buerger ersterBuergerEntity = buergerRepo.findOne(Long.parseLong(oid));
        if (ersterBuergerEntity == null)
            throw new IllegalArgumentException("Found no Buerger for oid: " + oid);

        // Tries to find the Buerger for the given id.
        // Form for id: http://'server_address'/'entity_name's/'oid'
        parts = abc.split("/");
        if (parts.length <= 2)
            throw new IllegalArgumentException("abc can only accept Buerger ids.");
        entity = parts[parts.length - 2];
        oid = parts[parts.length - 1];
        if (!"buerger".equals(entity))
            throw new IllegalArgumentException("Can only accept Buerger ids.");
        Buerger abcEntity = buergerRepo.findOne(Long.parseLong(oid));
        if (abcEntity == null)
            throw new IllegalArgumentException("Found no Buerger for oid: " + oid);

        Buerger result = actionService.buergerkombinieren(ersterBuergerEntity, abcEntity);
        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    /**
     * This BusinessAction's purpose is: listeWohnungAuswaehlen
     * It returns multiple Wohnung.
     */
    @RequestMapping(value = "/listewohnungauswaehlen", method = RequestMethod.GET)
    public ResponseEntity<?> listewohnungauswaehlen(PersistentEntityResourceAssembler assembler, @Param(value = "listeWohnungAuswaehlen") java.util.Collection<Long> listeWohnungAuswaehlen) {
        if (listeWohnungAuswaehlen == null)
            throw new IllegalArgumentException("Expected parameters: java.util.Collection<Long> listeWohnungAuswaehlen");

        // Tries to load all entity-params from their Repositories.
        // Parts of the String representation of the entities id.
        String[] parts;
        String entity;
        String oid;

        java.util.Collection<Wohnung> result = actionService.listewohnungauswaehlen(listeWohnungAuswaehlen);
        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    /**
     * Resource without content.
     */
    class BusinessLinksResource extends ResourceSupport {
        public BusinessLinksResource() {
        }
    }

} 
