package de.muenchen.kvr.buergerverwaltung.buerger.client.local;

/*
 * This file will NOT be overwritten by GAIA.
 * This file was automatically generated by GAIA.
 */

import javax.validation.constraints.NotNull;
import java.util.stream.Stream;
/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
public class Adresse_ {
	
	@NotNull
	private String strasse;
	
	@NotNull
	private long hausnummer;
	
	@NotNull
	private long plz;
	
	@NotNull
	private String ort;
	
	public Adresse_(){}
	
	/**
     * Create a new Adresse_ with the  strasse, hausnummer, plz, ort.
     *
     * @param strasse the strasse of the Adresse_.
     * @param hausnummer the hausnummer of the Adresse_.
     * @param plz the plz of the Adresse_.
     * @param ort the ort of the Adresse_.
     */
    public Adresse_( String strasse, long hausnummer, long plz, String ort) {
        this.setStrasse(strasse);
        this.setHausnummer(hausnummer);
        this.setPlz(plz);
        this.setOrt(ort);
    }
	
	// Getters and Setters
	public String getStrasse(){
		return strasse;
	}
	
	public void setStrasse(String strasse){
		this.strasse = strasse;
	}
	
	public long getHausnummer(){
		return hausnummer;
	}
	
	public void setHausnummer(long hausnummer){
		this.hausnummer = hausnummer;
	}
	
	public long getPlz(){
		return plz;
	}
	
	public void setPlz(long plz){
		this.plz = plz;
	}
	
	public String getOrt(){
		return ort;
	}
	
	public void setOrt(String ort){
		this.ort = ort;
	}
	
	 /**
      * A simple Enum for all the Fields of this Adresse_.
      * <p>
      *     You can use {@link Field#name()} for the String.
      * </p>
      */
	public enum Field {
        strasse, hausnummer, plz, ort;

        private final boolean field;

        Field() {
			this(true);
		}

		Field(boolean field) {
			this.field = field;
		}

		public boolean isField() {
			return field;
		}

		public static String[] getProperties() {
			return Stream.of(values()).filter(Field::isField).map(Field::name).toArray(String[]::new);
		}
	}
	
	 /**
	  * A simple Enum for all the Relations ({@link Adresse_#getLink(String)} of the Adresse_.
	  * <p>
	  *     You can use {@link Rel#name()} for the String.
	  * </p>
	  */
	 public enum Rel {
	 	;
    }

	@Override
	public boolean equals(Object o) {
		if (this == o) return true;
		if (!(o instanceof Adresse_)) return false;

		Adresse_ adresse_ = (Adresse_) o;

		if (getHausnummer() != adresse_.getHausnummer()) return false;
		if (getPlz() != adresse_.getPlz()) return false;
		if (!getStrasse().equals(adresse_.getStrasse())) return false;
		return getOrt().equals(adresse_.getOrt());

	}

	@Override
	public int hashCode() {
		int result = getStrasse().hashCode();
		result = 31 * result + (int) (getHausnummer() ^ (getHausnummer() >>> 32));
		result = 31 * result + (int) (getPlz() ^ (getPlz() >>> 32));
		result = 31 * result + getOrt().hashCode();
		return result;
	}

	@Override
	public String toString(){
		String s = "";
		s += "String strasse: " + this.getStrasse();
		s += "long hausnummer: " + this.getHausnummer();
		s += "long plz: " + this.getPlz();
		s += "String ort: " + this.getOrt();
		return s;
	}
}
