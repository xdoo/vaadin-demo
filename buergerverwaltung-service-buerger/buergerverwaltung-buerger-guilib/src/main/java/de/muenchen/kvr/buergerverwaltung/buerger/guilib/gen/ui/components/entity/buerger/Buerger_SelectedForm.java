package de.muenchen.kvr.buergerverwaltung.buerger.guilib.gen.ui.components.entity.buerger;

import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

import org.springframework.hateoas.Link;

import com.vaadin.data.util.BeanItemContainer;
import de.muenchen.eventbus.selector.entity.ResponseEntityKey;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Buerger_;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Wohnung_;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Sachbearbeiter_;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Pass_;
import de.muenchen.kvr.buergerverwaltung.buerger.guilib.gen.ui.components.buttons.listener.buerger.Buerger_SingleActions;
import de.muenchen.kvr.buergerverwaltung.buerger.guilib.gen.services.model.Buerger_Datastore;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
/**
 * Provides a simple {@link Buerger_Form} that always shows the {@link Buerger_Datastore#getSelectedBuerger()}.
 *
 * @author p.mueller
 * @version 1.0
 */
public class Buerger_SelectedForm extends Buerger_Form {

    /**
     * Creates a new Buerger_Form that updates its Buerger_ to the {@link Buerger_Datastore#getSelectedBuerger()}
     * from the Eventbus.
     */
    public Buerger_SelectedForm() {
        getEventBus().on(new ResponseEntityKey(Buerger_Form.ENTITY_CLASS).toSelector(), this::update);
    }
    
    public void reLoad() {
        final Buerger_SingleActions singleActions = new Buerger_SingleActions(this::getBuerger);
        singleActions.reRead(null);
    }

    /**
     * Update the Buerger_ of this Form to the selected one form the DataStore.
     *
     * @param event
     */
    private void update(reactor.bus.Event<?> event) {
        final Buerger_Datastore data = (Buerger_Datastore) event.getData();
        if(data.getSelectedBuerger().isPresent()){
        	Buerger_ buerger = data.getSelectedBuerger().get();
			final BeanItemContainer<Buerger_> kinder = data.getSelectedBuergerKinder();
			final List<String> listofkinder = new ArrayList<>();
			List<Buerger_> kinders = kinder.getItemIds();
			if(kinders != null){
				listofkinder.addAll(kinder.getItemIds().stream()
					.map(Buerger_::getId)
					.map(Link::getHref)
					.collect(Collectors.toList()));
			}
			buerger.setKinder(listofkinder);
			if (data.getSelectedBuergerPartner().isPresent()){
				final Buerger_ partner = data.getSelectedBuergerPartner().get();
				buerger.setPartner(partner.getId().getHref());
			}
			if (data.getSelectedBuergerWohnungen().isPresent()){
				final Wohnung_ wohnungen = data.getSelectedBuergerWohnungen().get();
				buerger.setWohnungen(wohnungen.getId().getHref());
			}
			final BeanItemContainer<Sachbearbeiter_> sachbearbeiter = data.getSelectedBuergerSachbearbeiter();
			final List<String> listofsachbearbeiter = new ArrayList<>();
			List<Sachbearbeiter_> sachbearbeiters = sachbearbeiter.getItemIds();
			if(sachbearbeiters != null){
				listofsachbearbeiter.addAll(sachbearbeiter.getItemIds().stream()
					.map(Sachbearbeiter_::getId)
					.map(Link::getHref)
					.collect(Collectors.toList()));
			}
			buerger.setSachbearbeiter(listofsachbearbeiter);
			if (data.getSelectedBuergerPass().isPresent()){
				final Pass_ pass = data.getSelectedBuergerPass().get();
				buerger.setPass(pass.getId().getHref());
			}
			setBuerger(buerger);
		}
    }
}
