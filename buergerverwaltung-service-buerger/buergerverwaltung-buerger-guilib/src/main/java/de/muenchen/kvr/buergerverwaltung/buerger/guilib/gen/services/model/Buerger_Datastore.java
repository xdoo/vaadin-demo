package de.muenchen.kvr.buergerverwaltung.buerger.guilib.gen.services.model;

import de.muenchen.vaadin.guilib.util.Datastore;
import com.vaadin.data.util.BeanItemContainer;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Buerger_;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Pass_;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Sachbearbeiter_;
import de.muenchen.kvr.buergerverwaltung.buerger.client.local.Wohnung_;
import java.util.Optional;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
/**
 * Provides a simple Model for the Buerger_ in the GUI.
 */
public class Buerger_Datastore implements Datastore<Buerger_>{

    /** All the kinder of the selectedBuerger. */
    private final BeanItemContainer<Buerger_> selectedBuergerKinder = new BeanItemContainer<>(Buerger_.class);

    /** The partner of the selectedBuerger. */
    private Optional<Buerger_> selectedBuergerPartner = Optional.empty();

    /** All the pass of the selectedBuerger. */
    private final BeanItemContainer<Pass_> selectedBuergerPass = new BeanItemContainer<>(Pass_.class);

    /** All the sachbearbeiter of the selectedBuerger. */
    private final BeanItemContainer<Sachbearbeiter_> selectedBuergerSachbearbeiter = new BeanItemContainer<>(Sachbearbeiter_.class);

    /** The hauptwohnung of the selectedBuerger. */
    private Optional<Wohnung_> selectedBuergerHauptwohnung = Optional.empty();
    
    /** A List of all the Buerger_, possible reduced by the query. */
    private final BeanItemContainer<Buerger_> buergers = new BeanItemContainer<>(Buerger_.class);
    
    /** The current (single or none) selected buerger in the GUI. */
    private Optional<Buerger_> selectedBuerger= Optional.empty();
    
    /** The query to filter the buerger. */
    private Optional<String> query = Optional.empty();

    public Optional<Buerger_> getSelectedBuerger() {
        return selectedBuerger;
    }

    /**
     * Set the Selected Buerger, if null the Optional will be empty.
     *
     * @param selectedBuerger The Buerger_ to set as the selected one.
     */
    public void setSelectedBuerger(Buerger_ selectedBuerger) {
        this.selectedBuerger = Optional.ofNullable(selectedBuerger);
    }

    public BeanItemContainer<Buerger_> getBuergers() {
        return buergers;
    }

    public Optional<String> getQuery() {
        return query;
    }

    /**
     * Set the current query.
     *
     * @param query The query.
     */
    public void setQuery(String query) {
        this.query = Optional.ofNullable(query);
    }

	/**
	 * Get the kinder of the current selected Buerger_
	 */
    public BeanItemContainer<Buerger_> getSelectedBuergerKinder() {
        return selectedBuergerKinder;
    }

	/**
	 * Get the partner of the current selected Buerger_
	 */
	public Optional<Buerger_> getSelectedBuergerPartner() {
	    return selectedBuergerPartner;
	}
	/**
	 * Set the partner of the current selected Buerger_
	 */
	public void setSelectedBuergerPartner(Optional<Buerger_> partner) {
	    this.selectedBuergerPartner = partner;
	}

	/**
	 * Get the pass of the current selected Buerger_
	 */
    public BeanItemContainer<Pass_> getSelectedBuergerPass() {
        return selectedBuergerPass;
    }

	/**
	 * Get the sachbearbeiter of the current selected Buerger_
	 */
    public BeanItemContainer<Sachbearbeiter_> getSelectedBuergerSachbearbeiter() {
        return selectedBuergerSachbearbeiter;
    }

	/**
	 * Get the hauptwohnung of the current selected Buerger_
	 */
	public Optional<Wohnung_> getSelectedBuergerHauptwohnung() {
	    return selectedBuergerHauptwohnung;
	}
	/**
	 * Set the hauptwohnung of the current selected Buerger_
	 */
	public void setSelectedBuergerHauptwohnung(Optional<Wohnung_> hauptwohnung) {
	    this.selectedBuergerHauptwohnung = hauptwohnung;
	}

	@Override
	public BeanItemContainer<Buerger_> getEntityContainer() {
		return getBuergers();
	}
}

