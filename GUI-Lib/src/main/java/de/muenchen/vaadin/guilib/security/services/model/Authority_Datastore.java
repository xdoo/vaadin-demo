package de.muenchen.vaadin.guilib.security.services.model;

import com.vaadin.data.util.BeanItemContainer;
import de.muenchen.vaadin.demo.apilib.local.Authority;
import de.muenchen.vaadin.demo.apilib.local.Permission;

import java.util.Optional;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */

/**
 * Provides a simple Model for the Authority_ in the GUI.
 */
public class Authority_Datastore {

    /** All the permissions of the selectedAuthority. */
    private final BeanItemContainer<Permission> selectedAuthorityPermissions = new BeanItemContainer<>(Permission.class);
    
    /** A List of all the Authority_, possible reduced by the query. */
    private final BeanItemContainer<Authority> authoritys = new BeanItemContainer<>(Authority.class);
    
    /** The current (single or none) selected authority in the GUI. */
    private Optional<Authority> selectedAuthority= Optional.empty();
    
    /** The query to filter the authority. */
    private Optional<String> query = Optional.empty();

    public Optional<Authority> getSelectedAuthority() {
        return selectedAuthority;
    }

    /**
     * Set the Selected Authority, if null the Optional will be empty.
     *
     * @param selectedAuthority The Authority_ to set as the selected one.
     */
    public void setSelectedAuthority(Authority selectedAuthority) {
        this.selectedAuthority = Optional.ofNullable(selectedAuthority);
    }

    public BeanItemContainer<Authority> getAuthoritys() {
        return authoritys;
    }

    public Optional<String> getQuery() {
        return query;
    }

    /**
     * Set the current query.
     *
     * @param query The query.
     */
    public void setQuery(String query) {
        this.query = Optional.ofNullable(query);
    }

	/**
	 * Get the permissions of the current selected Authority_
	 */
    public BeanItemContainer<Permission> getSelectedAuthorityPermissions() {
        return selectedAuthorityPermissions;
    }
}

