package de.muenchen.vaadin.guilib.security.services.model;

import com.vaadin.data.util.BeanItemContainer;
import de.muenchen.vaadin.demo.apilib.local.Authority_;
import de.muenchen.vaadin.demo.apilib.local.User_;

import java.util.Optional;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */

/**
 * Provides a simple Model for the User_ in the GUI.
 */
public class User_Datastore {

    /** All the authoritys of the selectedUser. */
    private final BeanItemContainer<Authority_> selectedUserAuthorities = new BeanItemContainer<>(Authority_.class);
    
    /** A List of all the User_, possible reduced by the query. */
    private final BeanItemContainer<User_> users = new BeanItemContainer<>(User_.class);
    
    /** The current (single or none) selected user in the GUI. */
    private Optional<User_> selectedUser= Optional.empty();
    
    /** The query to filter the user. */
    private Optional<String> query = Optional.empty();

    public Optional<User_> getSelectedUser() {
        return selectedUser;
    }

    /**
     * Set the Selected User, if null the Optional will be empty.
     *
     * @param selectedUser The User_ to set as the selected one.
     */
    public void setSelectedUser(User_ selectedUser) {
        this.selectedUser = Optional.ofNullable(selectedUser);
    }

    public BeanItemContainer<User_> getUsers() {
        return users;
    }

    public Optional<String> getQuery() {
        return query;
    }

    /**
     * Set the current query.
     *
     * @param query The query.
     */
    public void setQuery(String query) {
        this.query = Optional.ofNullable(query);
    }

	/**
	 * Get the authoritys of the current selected User_
	 */
    public BeanItemContainer<Authority_> getSelectedUserAuthorities() {
        return selectedUserAuthorities;
    }
}

