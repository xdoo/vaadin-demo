package de.muenchen.vaadin.guilib.security.controller;

import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.spring.annotation.UIScope;
import de.muenchen.eventbus.EventBus;
import de.muenchen.eventbus.events.Association;
import de.muenchen.eventbus.selector.entity.RequestEntityKey;
import de.muenchen.eventbus.selector.entity.RequestEvent;
import de.muenchen.eventbus.selector.entity.ResponseEntityKey;
import de.muenchen.vaadin.demo.apilib.local.Permission;
import de.muenchen.vaadin.guilib.BaseUI;
import de.muenchen.vaadin.guilib.security.services.Permission_Service;
import de.muenchen.vaadin.guilib.security.services.model.Permission_Datastore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.ResourceSupport;
import reactor.bus.Event;

import javax.annotation.PostConstruct;
import java.io.Serializable;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
@SpringComponent
@UIScope
public class Permission_ViewController implements Serializable{

	private static final long serialVersionUID = 1L;
	
	/**
	 * Logger
	 */
	private static final Logger LOG = LoggerFactory.getLogger(Permission_ViewController.class);
	
	/**
	 * Die Permission_Service Klasse
	 */
	@Autowired
	Permission_Service permissionService;
	
	private final Permission_Datastore model = new Permission_Datastore();
	

	@PostConstruct
	private void init() {
		initEventhandlers();
	}
	
	private EventBus getEventbus() {
        return BaseUI.getCurrentEventBus();
    }
	
	public Permission_Datastore getModel() {
		return model;
	}

	////////////////////////
	// Service Operations //
	////////////////////////

	/**
	 * Speichert ein {@link Permission} Objekt in der Datenbank.
	 *
	 * @param permission Permission_ der gespeichert werden soll
	 */
	public Permission save(Permission permission) {
		return permissionService.create(permission);
	}
	/**
	 * Speichert die Änderungen an einem {@link Permission} Objekt in der Datenbank.
	 *
	 * @param entity Permission_
	 * @return Permission_
	 */
	public Permission updatePermission(Permission entity) {
		return permissionService.update(entity);
	}

	/**
	 * Löscht ein {@link Permission} Objekt.
	 *
	 * @param entity Permission_
	 */
	public void deletePermission(Permission entity) {
		permissionService.delete(entity.getId());
	}

	public List<Permission> queryPermission() {
		return permissionService.findAll().stream().collect(Collectors.toList());
	}

	public List<Permission> queryPermission(String query) {
		return permissionService.queryPermission(query);
	}
	
	/////////////////////
	// Event Steuerung //
	/////////////////////

	/**
	 * Register all event handlers on the RequestEntityKey.
	 */
	private void initEventhandlers() {
		getEventbus().on(getRequestKey(RequestEvent.CREATE).toSelector(), this::create);
		getEventbus().on(getRequestKey(RequestEvent.DELETE).toSelector(), this::delete);
		getEventbus().on(getRequestKey(RequestEvent.UPDATE).toSelector(), this::update);
		getEventbus().on(getRequestKey(RequestEvent.ADD_ASSOCIATION).toSelector(), this::addAssociation);
		getEventbus().on(getRequestKey(RequestEvent.REMOVE_ASSOCIATION).toSelector(), this::removeAssociation);
		getEventbus().on(getRequestKey(RequestEvent.READ_LIST).toSelector(), this::readList);
		getEventbus().on(getRequestKey(RequestEvent.READ_SELECTED).toSelector(), this::readSelected);
	}

	/**
	 * Remove the specified Association from the specified Relation and update the DataStore.
	 * Update the Model and send it on the ResponseEntityKey if necessary.
	 *
	 * @param event The event with an {@link Association} as {@link Event#getData()}.
	 */
	void removeAssociation(Event<?> event) {
		final Object data = event.getData();
		if (data == null)
			throw new NullPointerException("Event data must not be null!");
		if (data.getClass() != Association.class)
			throw new IllegalArgumentException("The event must be of " + Association.class);

		final Association<?> association = (Association<?>) event.getData();
		final Permission.Rel rel = Permission.Rel.valueOf(association.getRel());
		
		notifyComponents();
	}

	/**
	 * Add the specified Association to the specified Relation and update the DataStore.
	 * <p>	 
	 * If the {@link Association#getAssociation()} has no {@link ResourceSupport#getId()} the Resouce will be created
	 * on the DataStore first.
	 * </p>
	 * Update the Model and send it on the ResponseEntityKey if necessary.
	 *
	 * @param event The event with an {@link Association} as {@link Event#getData()}.
	 */
	private void addAssociation(Event<?> event) {
		final Object data = event.getData();
		if (data == null) 
			throw new NullPointerException("Event data must not be null!");
		if (data.getClass() != Association.class)
			throw new IllegalArgumentException("The event must be of " + Association.class);

		final Association<?> association = (Association<?>) event.getData();

		final Permission.Rel rel = Permission.Rel.valueOf(association.getRel());
		refreshModelAssociations();
		notifyComponents();
	}

	/**	
	 * Create a new Buerger on the DataStore.
	 * Update the Model and send it on the ResponseEntityKey if necessary.
	 *
	 * @param event The event with an {@link Permission} as {@link Event#getData()}.
	 */
	private void create(Event<?> event) {
		final Object data = event.getData();
		if (data == null) 
			throw new NullPointerException("Event data must not be null!");
		if (data.getClass() != Permission.class)
			throw new IllegalArgumentException("The event must be of " + Permission.class);
		final Permission permission = (Permission) event.getData();
		final Permission fromREST = permissionService.create(permission);
		getModel().getPermissions().addBean(fromREST);
		notifyComponents();
	}


	/**
	 * Delete the Permission_ on the DataStore.
	 * Update the Model and send it on the ResponseEntityKey if necessary.
	 *
	 * @param event The event with an {@link Permission} as {@link Event#getData()}.
	 */
	private void delete(Event<?> event) {
		final Object data = event.getData();
		if (data == null) 
			throw new NullPointerException("Event data must not be null!");
		if (data.getClass() != Permission.class)
			throw new IllegalArgumentException("The event must be of " + Permission.class);
		final Permission permission = (Permission) event.getData();
		if (permission.getId() == null)
			throw new IllegalArgumentException("The Permission_ must have an ID.");
		permissionService.delete(permission.getId());
		getModel().getSelectedPermission().ifPresent(selectedPermission -> {
			if (selectedPermission.equals(permission)) {
				getModel().setSelectedPermission(null);
				// reset all selected relations
			}
		});
		getModel().getPermissions().removeItem(permission);
		notifyComponents();
	}

	/**
	 * Update the Permission_ on the DataStore.
	 * Update the Model and send it on the ResponseEntityKey if necessary.
	 *
	 * @param event The event with an {@link Permission} as {@link Event#getData()}.
	 */
	private void update(Event<?> event) {
		final Object data = event.getData();	 
		if (data == null) 
			throw new NullPointerException("Event data must not be null!");
		if (data.getClass() != Permission.class)
			throw new IllegalArgumentException("The event must be of " + Permission.class);
		final Permission permission = (Permission) event.getData();
		if (permission.getId() == null)
			throw new IllegalArgumentException("The Permission_ must have an ID.");
		final Permission fromREST = permissionService.update(permission);
		refreshModelSelected();
		getModel().getPermissions().addBean(fromREST);
		notifyComponents();
	}

	/**
	 * Refresh the {@link Permission_Datastore#permissions} list from the DataStore.
	 * <p/>	
	 * <p>
	 * This method also filters by the query (ifPresent).
	 * </p>
	 */
	private void refreshModelList() {
		final Optional<String> query = getModel().getQuery();
		if (query.isPresent()) {
			getModel().getPermissions().removeAllItems();
			getModel().getPermissions().addAll(queryPermission(query.get()));
		} else {
			getModel().getPermissions().removeAllItems();
			getModel().getPermissions().addAll(queryPermission());
		}
	}

	/**
	 * Refresh *all* the associations of the selected Permission_ in the model.
	 */
	void refreshModelAssociations() {
		getModel().getSelectedPermission().ifPresent(permission -> {
		});	
	}

	/**
	 * Refresh the current selected Permission_, but *not* its associations.
	 */
	private void refreshModelSelected() {
		getModel().getSelectedPermission().ifPresent(permission -> getModel().setSelectedPermission(permissionService.findOne(permission.getId()).orElse(null)));
	}

	/**	
	 * Set the query based on the String sent in the Event.
	 * Update the Model and send it on the ResponseEntityKey if necessary.
	 *
	 * @param event The event with a {@link String} query as {@link Event#getData()}.
	 */
	private void readList(Event<?> event) {
		final Object data = event.getData();

		if (data instanceof String) {
			final String filter = (String) event.getData();
			getModel().setQuery(filter);
		} else {
			getModel().setQuery(null);
		}

		refreshModelList();
		notifyComponents();
	}

	/**
	 * Read the Permission_ in the Event from the DataStore and set it as the current selected Permission_.
	 * If called with null, the current selected Permission_ will only be refreshed from the DataStore.
	 * Update the Model and send it on the ResponseEntityKey if necessary.
	 *
	 * @param event The event with an {@link Permission} or *null* as {@link Event#getData()}.
	 */
	private void readSelected(Event<?> event) {
		final Object data = event.getData();

		if (data instanceof Permission) {
			final Permission permission = (Permission) event.getData();
			getModel().setSelectedPermission(permission);
			refreshModelSelected();
			refreshModelAssociations();
		} else if (data == null) {
			refreshModelSelected();
			refreshModelAssociations();
		} else {
			throw new IllegalArgumentException("The event cannot be of Class " + event.getData().getClass());
		}
		notifyComponents();
    }

	/**
	 * Notify all the Components.
	 */
	public void notifyComponents() {
		getEventbus().notify(getResponseKey(), Event.wrap(getModel()));
	}

	/**
	 * Get the RequestEntityKey for this Entity.
	 *
	 * @param event The disered event the Key will have.
	 * @return The RequestEntityKey with the chosen RequestEvent.
	 */
	public RequestEntityKey getRequestKey(RequestEvent event) {
		return new RequestEntityKey(event, Permission.class);
	}

	/**
	 * Get the ResponseEntityKey for this Entity.
	 *
	 * @return The ResponseEntityKey.
	 */
	public ResponseEntityKey getResponseKey() {
		return new ResponseEntityKey(Permission.class);
	}
}
