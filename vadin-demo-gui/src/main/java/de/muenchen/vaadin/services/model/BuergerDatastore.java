package de.muenchen.vaadin.services.model;

import com.vaadin.data.util.BeanItemContainer;
import de.muenchen.vaadin.demo.api.local.Buerger;
import de.muenchen.vaadin.guilib.util.Datastore;

import java.util.Optional;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */

/**
 * Provides a simple Model for the Buerger in the GUI.
 */
public class BuergerDatastore implements Datastore<Buerger> {

    /**
     * A List of all the Buerger, possible reduced by the query.
     */
    private final BeanItemContainer<Buerger> buergers = new BeanItemContainer<>(Buerger.class);
    /**
     * All the kinder of the selectedBuerger.
     */
    private final BeanItemContainer<Buerger> selectedBuergerKinder = new BeanItemContainer<>(Buerger.class);
    /**
     * The partner of the selectedBuerger.
     */
    private Optional<Buerger> selectedBuergerPartner = Optional.empty();
    /**
     * The current (single or none) selected buerger in the GUI.
     */
    private Optional<Buerger> selectedBuerger = Optional.empty();


    /**
     * The query to filter the buerger.
     */
    private Optional<String> query = Optional.empty();

    @Override
    public BeanItemContainer<Buerger> getEntityContainer() {
        return getBuergers();
    }

    public Optional<Buerger> getSelectedBuerger() {
        return selectedBuerger;
    }

    /**
     * Set the Selected Buerger, if null the Optional will be empty.
     *
     * @param selectedBuerger The Buerger to set as the selected one.
     */
    public void setSelectedBuerger(Buerger selectedBuerger) {
        this.selectedBuerger = Optional.ofNullable(selectedBuerger);
    }

    public BeanItemContainer<Buerger> getBuergers() {
        return buergers;
    }

    public Optional<String> getQuery() {
        return query;
    }

    /**
     * Set the current query.
     *
     * @param query The query.
     */
    public void setQuery(String query) {
        this.query = Optional.ofNullable(query);
    }

    /**
     * Get the kinder of the current selected buerger
     */
    public BeanItemContainer<Buerger> getSelectedBuergerKinder() {
        return selectedBuergerKinder;
    }

    /**
     * Get the partner of the current selected buerger
     */
    public Optional<Buerger> getSelectedBuergerPartner() {
        return selectedBuergerPartner;
    }

    /**
     * Set the partner of the current selected buerger
     */
    public void setSelectedBuergerPartner(Optional<Buerger> partner) {
        this.selectedBuergerPartner = partner;
    }


}

