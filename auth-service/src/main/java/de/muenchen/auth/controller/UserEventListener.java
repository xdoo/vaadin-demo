package de.muenchen.auth.controller;

import de.muenchen.auth.entities.User;
import de.muenchen.auth.services.UserEventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.core.event.AbstractRepositoryEventListener;
import org.springframework.stereotype.Component;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */

/**
 * This event-listener allows a UserEventService to implement logic before and after Events.
 */
@Component
public class UserEventListener extends AbstractRepositoryEventListener<User> {
    @Autowired
    UserEventService service;

    @Override
    protected void onAfterCreate(User entity) {
        service.onAfterCreate(entity);
    }

    @Override
    protected void onBeforeCreate(User entity) {
        service.onBeforeCreate(entity);
    }

    @Override
    protected void onBeforeSave(User entity) {
        service.onBeforeSave(entity);
    }

    @Override
    protected void onAfterSave(User entity) {
        service.onAfterSave(entity);
    }

    @Override
    protected void onBeforeLinkSave(User parent, Object linked) {
        service.onBeforeLinkSave(parent, linked);
    }

    @Override
    protected void onAfterLinkSave(User parent, Object linked) {
        service.onAfterLinkSave(parent, linked);
    }

    @Override
    protected void onBeforeLinkDelete(User parent, Object linked) {
        service.onBeforeLinkDelete(parent, linked);
    }

    @Override
    protected void onBeforeDelete(User entity) {
        service.onBeforeDelete(entity);
    }

    @Override
    protected void onAfterDelete(User entity) {
        service.onAfterDelete(entity);
    }

    @Override
    protected void onAfterLinkDelete(User parent, Object linked) {
        service.onAfterLinkDelete(parent, linked);
    }
}
