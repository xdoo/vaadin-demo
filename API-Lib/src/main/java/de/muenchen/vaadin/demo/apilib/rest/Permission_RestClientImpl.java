package de.muenchen.vaadin.demo.apilib.rest;

import de.muenchen.vaadin.demo.apilib.domain.Permission_DTO;
import de.muenchen.vaadin.demo.apilib.hateoas.Permission_Assembler;
import de.muenchen.vaadin.demo.apilib.local.Permission_;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.MediaTypes;
import org.springframework.hateoas.client.Traverson;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.web.client.RestTemplate;

import java.net.URI;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/*
 * This file will be overwritten on every change of the model!
 * This file was automatically generated by GAIA.
 */
public class Permission_RestClientImpl implements Permission_RestClient {
	
	public static final String FIND_FULL_TEXT_FUZZY = "findFullTextFuzzy";
	public static final String SEARCH = "search";
	
	/**
     * Used to follow HATEOAS relations.
    */
    private final Traverson traverson;
    /** The restTemplate used for the HTTP Requests. */
    private final RestTemplate restTemplate;
    /** Assembler to switch from Permission_DTO Resource to Permission_ and vice versa. */
    private final Permission_Assembler permissionAssembler = new Permission_Assembler();
	
	/**
	 * Create a new Permission_RestClient by RestTemplate and baseUri of the server.
     * @param restTemplate The restTemplate for the HTTP Requests.
     * @param baseUri The base URI of the REST Server.
     */
    public Permission_RestClientImpl(RestTemplate restTemplate, URI baseUri) {
        this.restTemplate = restTemplate;
        traverson = new Traverson(baseUri, MediaTypes.HAL_JSON);
        traverson.setRestOperations(restTemplate);
    }
	
	@Override
	public List<Permission_> findFullTextFuzzy(String filter) {
	return traverson.follow(PERMISSIONS, SEARCH, FIND_FULL_TEXT_FUZZY)
	.withTemplateParameters(Collections.singletonMap("q", filter))
	.toObject(Permission_Resource.LIST).getContent()
	.stream()
	.map(permissionAssembler::toBean)
	.collect(Collectors.toList());
	}
	
	@Override
	public List<Permission_> findAll() {  
		return traverson
				.follow(PERMISSIONS)
				.toObject(Permission_Resource.LIST).getContent()
				
				.stream()
				.map(permissionAssembler::toBean)
				.collect(Collectors.toList());
	}
	@Override
	public List<Permission_> findAll(Link relation) {
		URI uri = URI.create(relation.getHref());
			 return restTemplate
			 		.exchange(uri, HttpMethod.GET, null, Permission_Resource.LIST)
			 		.getBody()
			 		.getContent()
			 		
			 		.stream()
			 		.map(permissionAssembler::toBean)
			 		.collect(Collectors.toList());
	}
		
	@Override
	public Optional<Permission_> findOne(Link link) {
	     URI uri = URI.create(link.getHref());
		Permission_Resource resource = restTemplate
				.exchange(uri, HttpMethod.GET, null, Permission_Resource.class)
				.getBody();
				
		return Optional.of(permissionAssembler.toBean(resource));
	}
	@Override
	public void setRelations(Link endpoint, Collection<Link> links) {
		String relations = links.stream().map(Link::getHref).collect(Collectors.joining("\n"));
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(new MediaType("text", "uri-list"));
		restTemplate.exchange(URI.create(endpoint.getHref()), HttpMethod.PUT, new HttpEntity<>(relations, headers), Void.class);
	}
	
	@Override
    public void setRelation(Link endpoint, Link relation) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(new MediaType("text", "uri-list"));
		restTemplate.exchange(URI.create(endpoint.getHref()), HttpMethod.PUT, new HttpEntity<>(relation.getHref(), headers), Void.class);
    }

		
	@Override
	public Permission_ create(Permission_ permission) {
		URI uri = URI.create(
		traverson.follow(PERMISSIONS).asLink().getHref());
			Permission_DTO permissionDTO = permissionAssembler.toResource(permission).getContent();
			Permission_Resource resource = restTemplate.exchange(uri, HttpMethod.POST, new HttpEntity<>(permissionDTO), Permission_Resource.class).getBody();
			return permissionAssembler.toBean(resource);
	}
	
	@Override
	public Permission_ update(Permission_ permission) {

        URI uri = URI.create(permission.getId().getHref());

        Permission_DTO permissionDTO = permissionAssembler.toResource(permission).getContent();

        Permission_Resource resource = restTemplate.exchange(uri, HttpMethod.PUT, new HttpEntity<>(permissionDTO), Permission_Resource.class).getBody();

        return permissionAssembler.toBean(resource);
    }
		
	@Override
	public void delete(Link id) {
		URI uri = URI.create(id.getHref());
		restTemplate.exchange(uri, HttpMethod.DELETE, null, Void.class);
	}
}
